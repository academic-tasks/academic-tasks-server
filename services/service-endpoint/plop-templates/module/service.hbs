import {
  AppAction,
  AppSubject,
  {{ pascalCase name }},
  ICreate{{ pascalCase name }}Input,
  IDelete{{ pascalCase name }}Input,
  IFind{{ pascalCase name }}ByIdInput,
  IUpdate{{ pascalCase name }}Input,
} from '@academic-tasks/schemas';
import { subject } from '@casl/ability';
import { Inject, Injectable, NotFoundException } from '@nestjs/common';
import { omit, pick } from 'lodash';
import { parralel } from 'src/app/helpers';
import { I{{ pascalCase name }}Repository } from 'src/app/repositories/{{ paramCase name }}.repository';
import { FindOneOptions } from 'typeorm';
import { ResourceActionRequest } from '../../../infrastructure/auth/ResourceActionRequest';
import {
  REPOSITORY_{{ constantCase name }},
} from '../../../infrastructure/database/constants/REPOSITORIES.const';
import { {{ pascalCase name }}DbEntity } from '../../entities/{{ paramCase name }}.db.entity';

@Injectable()
export class {{ pascalCase name }}Service {
  constructor(
    @Inject(REPOSITORY_{{ constantCase name }})
    private {{ camelCase name }}Repository: I{{ pascalCase name }}Repository,
  ) {}

  async find{{ pascalCase name }}ById(
    resourceActionRequest: ResourceActionRequest,
    dto: IFind{{ pascalCase name }}ByIdInput,
    options: FindOneOptions<{{ pascalCase name }}DbEntity> | null = null,
  ) {
    const { id } = dto;

    const target{{ pascalCase name }} = await this.{{ camelCase name }}Repository.findOne({
      where: { id },
      select: ['id'],
    });

    if (!target{{ pascalCase name }}) {
      throw new NotFoundException();
    }

    const {{ camelCase name }} = await this.{{ camelCase name }}Repository.findOneOrFail({
      where: { id: target{{ pascalCase name }}.id },
      select: ['id'],
      ...options,
    });

    return resourceActionRequest.readResource(AppSubject.{{ constantCase name }}, {{ camelCase name }});
  }

  async find{{ pascalCase name }}ByIdSimple(
    resourceActionRequest: ResourceActionRequest,
    {{ camelCase name }}Id: string,
  ): Promise<Pick<{{ pascalCase name }}DbEntity, 'id'>> {
    const {{ camelCase name }} = await this.find{{ pascalCase name }}ById(resourceActionRequest, {
      id: {{ camelCase name }}Id,
    });

    return {{ camelCase name }} as Pick<{{ pascalCase name }}DbEntity, 'id'>;
  }

  async get{{ pascalCase name }}GenericField<K extends keyof {{ pascalCase name }}DbEntity>(
    resourceActionRequest: ResourceActionRequest,
    {{ camelCase name }}Id: string,
    field: K,
  ): Promise<{{ pascalCase name }}DbEntity[K]> {
    const {{ camelCase name }} = await this.find{{ pascalCase name }}ById(
      resourceActionRequest,
      { id: {{ camelCase name }}Id },
      { select: ['id', field] },
    );

    resourceActionRequest.ensurePermission(
      AppAction.READ,
      subject(AppSubject.{{ constantCase name }}, {{ camelCase name }}),
      field,
    );

    return <{{ pascalCase name }}DbEntity[K]>{{ camelCase name }}[field];
  }

  /*
  async get{{ pascalCase name }}Field(
    resourceActionRequest: ResourceActionRequest,
    {{ camelCase name }}Id: string,
  ): Promise<{{ pascalCase name }}DbEntity['field']> {
    return this.get{{ pascalCase name }}GenericField(resourceActionRequest, {{ camelCase name }}Id, 'field');
  }
  */

  /*
  async get{{ pascalCase name }}Relation(
    resourceActionRequest: ResourceActionRequest,
    {{ camelCase name }}Id: string,
  ): Promise<unknown> {
    const {{ camelCase name }} = await this.find{{ pascalCase name }}ByIdSimple(
      resourceActionRequest,
      {{ camelCase name }}Id,
    );

    const relationQuery = this.relationRepository
      .createQueryBuilder('relation')
      .innerJoin('relation.relation_{{ snakeCase name }}', 'relation_{{ snakeCase name }}')
      .select(['relation.id'])
      .where('relation_{{ snakeCase name }}.id_{{ snakeCase name }}_fk = :id', { id: {{ camelCase name }}.id });

    // const result = await relationQuery.getOne(); 
    // const result = await relationQuery.getMany(); 
    const result = null;

    return result;
  }
  */

  async create{{ pascalCase name }}(
    resourceActionRequest: ResourceActionRequest,
    dto: ICreate{{ pascalCase name }}Input,
  ) {
    const fieldsData = pick(dto, []);

    const {{ camelCase name }} = resourceActionRequest.updateResource(
      AppSubject.{{ constantCase name }},
      <{{ pascalCase name }}DbEntity>{},
      fieldsData,
      AppAction.CREATE,
    );

    {{ pascalCase name }}DbEntity.setupInitialIds({{ camelCase name }});

    resourceActionRequest.ensurePermission(
      AppAction.CREATE,
      subject(AppSubject.{{ constantCase name }}, {{ camelCase name }}),
    );

    await this.{{ camelCase name }}Repository.save({{ camelCase name }});

    return this.find{{ pascalCase name }}ByIdSimple(resourceActionRequest, {{ camelCase name }}.id);
  }

  async update{{ pascalCase name }}(
    resourceActionRequest: ResourceActionRequest,
    dto: IUpdate{{ pascalCase name }}Input,
  ) {
    const { id } = dto;

    const {{ camelCase name }} = await this.find{{ pascalCase name }}ByIdSimple(resourceActionRequest, id);

    const fieldsData = omit(dto, ['id']);

    const updated{{ pascalCase name }} = resourceActionRequest.updateResource(
      AppSubject.{{ constantCase name }},
      <{{ pascalCase name }}DbEntity>{{ camelCase name }},
      fieldsData,
    );

    resourceActionRequest.ensurePermission(
      AppAction.UPDATE,
      subject(AppSubject.{{ constantCase name }}, {{ camelCase name }}),
    );

    await this.{{ camelCase name }}Repository.save(updated{{ pascalCase name }});

    return this.find{{ pascalCase name }}ByIdSimple(resourceActionRequest, {{ camelCase name }}.id);
  }

  async delete{{ pascalCase name }}(
    resourceActionRequest: ResourceActionRequest,
    dto: IDelete{{ pascalCase name }}Input,
  ) {
    const {{ camelCase name }} = await this.find{{ pascalCase name }}ByIdSimple(resourceActionRequest, dto.id);

    resourceActionRequest.ensurePermission(
      AppAction.DELETE,
      subject(AppSubject.{{ constantCase name }}, {{ camelCase name }}),
    );

    await this.{{ camelCase name }}Repository.delete({{ camelCase name }}.id);

    return true;
  }
}
